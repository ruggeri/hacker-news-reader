#!/usr/bin/env ruby

require 'io/console'
require_relative '../lib/database_api.rb'
require_relative '../lib/database_connection.rb'
require_relative '../lib/reviewer.rb'

module HackerNewsReader; end

module HackerNewsReader::ReviewCommand
  # So I don't have to endlessly namespace stuff.
  include HackerNewsReader

  def self.handle_command!(reviewer, command)
    case command
    when "f"
      # f => mark as interesting.
      reviewer.mark_item!('INTERESTING')
    when "j"
      # j => mark as ignored.
      reviewer.mark_item!('IGNORED')
    when "u"
      # u => undo last marking.
      reviewer.undo_previous_marking!('UNMARKED')
    when "\cc"
      # Control-c means quit the program
      puts "Goodbye!"
      exit
    end
  end

  # Review and mark pulled items stored in the DB.
  def self.main
    db = DatabaseConnection::get_db_connection
    unmarked_items = DatabaseAPI::get_unmarked_items(db)

    reviewer = Reviewer.new(db, unmarked_items)
    reviewer.review_items! do |command|
      handle_command!(reviewer, command)
    end
  end
end

HackerNewsReader::ReviewCommand::main
