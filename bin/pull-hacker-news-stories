#!/usr/bin/env ruby

require_relative '../lib/config.rb'
require_relative '../lib/database_api.rb'
require_relative '../lib/database_connection.rb'
require_relative '../lib/web_api.rb'

module HackerNewsReader; end

module HackerNewsReader::PullCommand
  # So I don't have to endlessly namespace stuff.
  include HackerNewsReader

  # Decides whether we should pull new data about a previously stored
  # item. This keeps things like the link, story name, author, score up
  # to date.
  def self.should_pull?(stored_item)
    # Definitely pull if we haven't stored this item yet.
    return true if stored_item.nil?

    # There is no need to update information about a story we have
    # previously emailed about.
    return false if stored_item.emailed?

    # Or for one we marked as ignored.
    return false if stored_item.ignored?

    # Don't pull more info about recently pulled items. We don't want to
    # make an extravagant number of API calls.
    time_diff = Time.now - stored_item.pulled_at
    time_diff > Config::SECONDS_BEFORE_REFRESH
  end

  # Pulls down a list of the best stories. For each best story, if not
  # yet emailed, pulls down more info. Will then update the stored info
  # in the db.
  def self.pull_best_items_and_update(db)
    WebAPI::pull_best_ids.each do |new_id|
      puts "#{new_id}: Fetching stored value" if Config::FETCH_LOGGING
      stored_item = DatabaseAPI::get_item_by_id(db, new_id)

      unless should_pull?(stored_item)
        puts "#{new_id}: Skipping" if Config::FETCH_LOGGING
        next
      end

      puts "#{new_id}: Pulling"
      pulled_item = WebAPI::pull_item(new_id)

      if stored_item.nil?
        puts "#{new_id}: Storing" if Config::FETCH_LOGGING
        DatabaseAPI::insert_item(db, pulled_item, Time.now)
      else
        puts "#{new_id}: Updating" if Config::FETCH_LOGGING
        DatabaseAPI::update_item_from_web(db, pulled_item, Time.now)
      end
    end
  end

  def self.main
    db = DatabaseConnection::get_db_connection
    pull_best_items_and_update(db)
  end
end

HackerNewsReader::PullCommand::main
